package com.wordnik.api;


import com.wordnik.common.*;
import com.wordnik.common.ext.*;
import com.wordnik.exception.WordnikExceptionCodes;
import com.wordnik.exception.WordnikAPIException;
import com.wordnik.model.*;
import java.util.*;
import com.wordnik.annotations.MethodArgumentNames;
import org.codehaus.jackson.map.DeserializationConfig.Feature;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.type.TypeReference;
import java.io.IOException;

/**
 * NOTE: This class is auto generated by the drive code generator program so please do not edit the program manually.  
 * @author ramesh
 *
 */
public class WordListAPI extends WordnikAPI {

	/**
	 * Fetches a WordList by ID
 
	 * @param wordListId  ID of WordList to fetch
 
	 * @param authToken  The auth token of the logged-in user, obtained by calling /account.{format}/authenticate/{username} (described above)
 

	 * 
	 * @return WordList {@link WordList}
	 * @throws WordnikAPIException 400 - Invalid ID supplied 403 - Not Authorized to access WordList 404 - WordList not found  
	 */
	 @MethodArgumentNames(value="wordListId, authToken") 
	public static WordList getWordListById(String wordListId, String authToken) throws WordnikAPIException {

		if(authToken == null || authToken.length() == 0) {
			throw new WordnikAPIException(WordnikExceptionCodes.AUTH_TOKEN_NOT_VALID);
		}		
		//parse inputs
		String  resourcePath = "/wordList.{format}/{wordListId}";
		resourcePath = resourcePath.replace("{format}","json");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		
		if( wordListId != null) {
			resourcePath = resourcePath.replace("{wordListId}", wordListId);
		}
		
	
		//make the API Call
		String response = invokeAPI(authToken, resourcePath, method, queryParams, null);
		//create output objects if the response has more than one object
        if(response == null || response.length() == 0){
            return null;
        }
		WordList responseObject = (WordList)deserialize(response, WordList.class);
		return responseObject;		
				
	}
	
	
	/**
	 * Fetches words in a WordList
 
	 * @param authToken  The auth token of the logged-in user, obtained by calling /account.{format}/authenticate/{username} (described above)
 
	 * @param wordListWordsInput  
 

	 * 
	 * @return List<WordListWord> {@link WordListWord}
	 * @throws WordnikAPIException 400 - Invalid ID supplied 403 - Not Authorized to access WordList 404 - WordList not found  
	 */
	 @MethodArgumentNames(value="authToken, wordListWordsInput") 
	public static List<WordListWord> getWordListWords(String authToken, WordListWordsInput wordListWordsInput) throws WordnikAPIException {

		if(authToken == null || authToken.length() == 0) {
			throw new WordnikAPIException(WordnikExceptionCodes.AUTH_TOKEN_NOT_VALID);
		}		
		//parse inputs
		String  resourcePath = "/wordList.{format}/{wordListId}/words";
		resourcePath = resourcePath.replace("{format}","json");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		
		
		if( wordListWordsInput != null && wordListWordsInput.getSortBy() != null) {
		 	queryParams.put("sortBy", wordListWordsInput.getSortBy());
		}
		if( wordListWordsInput != null && wordListWordsInput.getSortOrder() != null) {
		 	queryParams.put("sortOrder", wordListWordsInput.getSortOrder());
		}
		if( wordListWordsInput != null && wordListWordsInput.getSkip() != null) {
		 	queryParams.put("skip", wordListWordsInput.getSkip());
		}
		if( wordListWordsInput != null && wordListWordsInput.getLimit() != null) {
		 	queryParams.put("limit", wordListWordsInput.getLimit());
		}

		if( wordListWordsInput != null && wordListWordsInput.getWordListId() != null) {
		 	resourcePath = resourcePath.replace("{wordListId}", wordListWordsInput.getWordListId());	
		}
	
		//make the API Call
		String response = invokeAPI(authToken, resourcePath, method, queryParams, null);
		//create output objects if the response has more than one object
        if(response == null || response.length() == 0){
            return null;
        }
		
        TypeReference<ArrayList<WordListWord>> typeRef = new TypeReference<ArrayList<WordListWord>>() {
		};
        try {
            List<WordListWord> responseObject = (List<WordListWord>) mapper.readValue(response, typeRef);
            return responseObject;
        } catch (IOException ioe) {
        	String[] args = new String[]{response, typeRef.toString()};
            throw new WordnikAPIException(WordnikExceptionCodes.ERROR_CONVERTING_JSON_TO_JAVA, args, "Error in converting response json value to java object : " + ioe.getMessage(), ioe);
        }						
	}
	
	
	/**
	 * Adds words to a WordList
 
	 * @param wordListId  ID of WordList to user
 
	 * @param postObject  Words to add to WordList
 
	 * @param authToken  The auth token of the logged-in user, obtained by calling /account.{format}/authenticate/{username} (described above)
 

	 * 
	 * @return void {@link Void}
	 * @throws WordnikAPIException 400 - Invalid ID supplied 403 - Not Authorized to access WordList 404 - WordList not found  
	 */
	 @MethodArgumentNames(value="wordListId, postObject, authToken") 
	public static void addWordsToWordList(String wordListId, StringValue[] postObject, String authToken) throws WordnikAPIException {

		if(authToken == null || authToken.length() == 0) {
			throw new WordnikAPIException(WordnikExceptionCodes.AUTH_TOKEN_NOT_VALID);
		}		
		//parse inputs
		String  resourcePath = "/wordList.{format}/{wordListId}/words";
		resourcePath = resourcePath.replace("{format}","json");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		
		if( wordListId != null) {
			resourcePath = resourcePath.replace("{wordListId}", wordListId);
		}
		
	
		//make the API Call
	
		String response = invokeAPI(authToken, resourcePath, method, queryParams, postObject);		
		
		//create output objects if the response has more than one object
		
	}
	
	
	/**
	 * Updates an existing WordList
 
	 * @param wordListId  ID of WordList to update
 
	 * @param postObject  Updated WordList
 
	 * @param authToken  The auth token of the logged-in user, obtained by calling /account.{format}/authenticate/{username} (described above)
 

	 * 
	 * @return void {@link Void}
	 * @throws WordnikAPIException 400 - Invalid ID supplied 403 - Not Authorized to update WordList 404 - WordList not found  
	 */
	 @MethodArgumentNames(value="wordListId, postObject, authToken") 
	public static void updateWordList(String wordListId, WordList postObject, String authToken) throws WordnikAPIException {

		if(authToken == null || authToken.length() == 0) {
			throw new WordnikAPIException(WordnikExceptionCodes.AUTH_TOKEN_NOT_VALID);
		}		
		//parse inputs
		String  resourcePath = "/wordList.{format}/{wordListId}";
		resourcePath = resourcePath.replace("{format}","json");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		
		if( wordListId != null) {
			resourcePath = resourcePath.replace("{wordListId}", wordListId);
		}
		
	
		//make the API Call
	
		String response = invokeAPI(authToken, resourcePath, method, queryParams, postObject);		
		
		//create output objects if the response has more than one object
		
	}
	
	
	/**
	 * Deletes an existing WordList
 
	 * @param wordListId  ID of WordList to delete
 
	 * @param authToken  The auth token of the logged-in user, obtained by calling /account.{format}/authenticate/{username} (described above)
 

	 * 
	 * @return void {@link Void}
	 * @throws WordnikAPIException 400 - Invalid ID supplied 403 - Not Authorized to delete WordList 404 - WordList not found  
	 */
	 @MethodArgumentNames(value="wordListId, authToken") 
	public static void deleteWordList(String wordListId, String authToken) throws WordnikAPIException {

		if(authToken == null || authToken.length() == 0) {
			throw new WordnikAPIException(WordnikExceptionCodes.AUTH_TOKEN_NOT_VALID);
		}		
		//parse inputs
		String  resourcePath = "/wordList.{format}/{wordListId}";
		resourcePath = resourcePath.replace("{format}","json");
		String method = "DELETE";
		Map<String, String> queryParams = new HashMap<String, String>();
		
		if( wordListId != null) {
			resourcePath = resourcePath.replace("{wordListId}", wordListId);
		}
		
	
		//make the API Call
		String response = invokeAPI(authToken, resourcePath, method, queryParams, null);
		//create output objects if the response has more than one object
		
	}
	
	
	/**
	 * Removes words from a WordList
 
	 * @param wordListId  ID of WordList to use
 
	 * @param postObject  Words to remove from WordList
 
	 * @param authToken  The auth token of the logged-in user, obtained by calling /account.{format}/authenticate/{username} (described above)
 

	 * 
	 * @return void {@link Void}
	 * @throws WordnikAPIException 400 - Invalid ID supplied 403 - Not Authorized to modify WordList 404 - WordList not found  
	 */
	 @MethodArgumentNames(value="wordListId, postObject, authToken") 
	public static void deleteWordsFromWordList(String wordListId, StringValue[] postObject, String authToken) throws WordnikAPIException {

		if(authToken == null || authToken.length() == 0) {
			throw new WordnikAPIException(WordnikExceptionCodes.AUTH_TOKEN_NOT_VALID);
		}		
		//parse inputs
		String  resourcePath = "/wordList.{format}/{wordListId}/deleteWords";
		resourcePath = resourcePath.replace("{format}","json");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		
		if( wordListId != null) {
			resourcePath = resourcePath.replace("{wordListId}", wordListId);
		}
		
	
		//make the API Call
	
		String response = invokeAPI(authToken, resourcePath, method, queryParams, postObject);		
		
		//create output objects if the response has more than one object
		
	}
	
	
	
}