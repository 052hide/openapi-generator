package com.wordnik.api;


import com.wordnik.common.*;
import com.wordnik.common.ext.*;
import com.wordnik.exception.WordnikExceptionCodes;
import com.wordnik.exception.WordnikAPIException;
import com.wordnik.model.*;
import java.util.*;
import com.wordnik.annotations.MethodArgumentNames;
import org.codehaus.jackson.map.DeserializationConfig.Feature;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.type.TypeReference;
import java.io.IOException;

/**
 * NOTE: This class is auto generated by the drive code generator program so please do not edit the program manually.  
 * @author ramesh
 *
 */
public class AccountAPI extends WordnikAPI {

	/**
	 * Authenticates a User
 
	 * @param username  A confirmed Wordnik username
 
	 * @param password  The user's password
 

	 * 
	 * @return AuthenticationToken {@link AuthenticationToken}
	 * @throws WordnikAPIException 403 - Account not available. 404 - User not found.  
	 */
	 @MethodArgumentNames(value="username, password") 
	public static AuthenticationToken authenticate(String username, String password) throws WordnikAPIException {

		
		//parse inputs
		String  resourcePath = "/account.{format}/authenticate/{username}";
		resourcePath = resourcePath.replace("{format}","json");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		
		if( password != null) {
		 	queryParams.put("password", password);
		}

		if( username != null) {
			resourcePath = resourcePath.replace("{username}", username);
		}
		
	
		//make the API Call
		String response = invokeAPI(null, resourcePath, method, queryParams, null);
		//create output objects if the response has more than one object
        if(response == null || response.length() == 0){
            return null;
        }
		AuthenticationToken responseObject = (AuthenticationToken)deserialize(response, AuthenticationToken.class);
		return responseObject;		
				
	}
	
	
	/**
	 * Returns usage statistics for the API account.
 
	 * 
	 * @return ApiTokenStatus {@link ApiTokenStatus}
	 * @throws WordnikAPIException 400 - No token supplied. 404 - No API account with supplied token.  
	 */
	public static ApiTokenStatus getApiTokenStatus() throws WordnikAPIException {

		
		//parse inputs
		String  resourcePath = "/account.{format}/apiTokenStatus";
		resourcePath = resourcePath.replace("{format}","json");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		
		
	
		//make the API Call
		String response = invokeAPI(null, resourcePath, method, queryParams, null);
		//create output objects if the response has more than one object
        if(response == null || response.length() == 0){
            return null;
        }
		ApiTokenStatus responseObject = (ApiTokenStatus)deserialize(response, ApiTokenStatus.class);
		return responseObject;		
				
	}
	
	
	/**
	 * Returns an ApiResponse indicating whether or not a username is available
 
	 * @param username  Username
 

	 * 
	 * @return ApiResponse {@link ApiResponse}
	 * @throws WordnikAPIException 400 - Invalid username supplied. 404 - No activation code available.  
	 */
	 @MethodArgumentNames(value="username") 
	public static ApiResponse getUsernameAvailable(String username) throws WordnikAPIException {

		
		//parse inputs
		String  resourcePath = "/account.{format}/usernameAvailable/{username}";
		resourcePath = resourcePath.replace("{format}","json");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		
		if( username != null) {
			resourcePath = resourcePath.replace("{username}", username);
		}
		
	
		//make the API Call
		String response = invokeAPI(null, resourcePath, method, queryParams, null);
		//create output objects if the response has more than one object
        if(response == null || response.length() == 0){
            return null;
        }
		ApiResponse responseObject = (ApiResponse)deserialize(response, ApiResponse.class);
		return responseObject;		
				
	}
	
	
	/**
	 * Regenerates an API Token.  Currently not supported or tested.
 
	 * 
	 * @return void {@link Void}
	 * @throws WordnikAPIException 400 - Invalid token supplied.  
	 */
	public static void createApiAccount() throws WordnikAPIException {

		
		//parse inputs
		String  resourcePath = "/account.{format}/regenerateApiToken";
		resourcePath = resourcePath.replace("{format}","json");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		
		
	
		//make the API Call
		String response = invokeAPI(null, resourcePath, method, queryParams, null);
		//create output objects if the response has more than one object
		
	}
	
	
	/**
	 * Authenticates a user
 
	 * @param username  A confirmed Wordnik username
 
	 * @param postObject  The user's password
 

	 * 
	 * @return AuthenticationToken {@link AuthenticationToken}
	 * @throws WordnikAPIException 403 - Account not available. 404 - User not found.  
	 */
	 @MethodArgumentNames(value="username, postObject") 
	public static AuthenticationToken authenticatePost(String username, String postObject) throws WordnikAPIException {

		
		//parse inputs
		String  resourcePath = "/account.{format}/authenticate/{username}";
		resourcePath = resourcePath.replace("{format}","json");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		
		if( username != null) {
			resourcePath = resourcePath.replace("{username}", username);
		}
		
	
		//make the API Call
		
	
	    String response = invokeAPI(null, resourcePath, method, queryParams, postObject);		
		//create output objects if the response has more than one object
        if(response == null || response.length() == 0){
            return null;
        }
		AuthenticationToken responseObject = (AuthenticationToken)deserialize(response, AuthenticationToken.class);
		return responseObject;		
				
	}
	
	
	/**
	 * Returns the logged-in User
 Requires a valid auth_token to be set.
	 * @param authToken  The auth token of the logged-in user, obtained by calling /account.{format}/authenticate/{username} (described above)
 

	 * 
	 * @return User {@link User}
	 * @throws WordnikAPIException 403 - Not logged in. 404 - User not found.  
	 */
	 @MethodArgumentNames(value="authToken") 
	public static User getLoggedInUser(String authToken) throws WordnikAPIException {

		if(authToken == null || authToken.length() == 0) {
			throw new WordnikAPIException(WordnikExceptionCodes.AUTH_TOKEN_NOT_VALID);
		}		
		//parse inputs
		String  resourcePath = "/account.{format}/user";
		resourcePath = resourcePath.replace("{format}","json");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		
		
	
		//make the API Call
		String response = invokeAPI(authToken, resourcePath, method, queryParams, null);
		//create output objects if the response has more than one object
        if(response == null || response.length() == 0){
            return null;
        }
		User responseObject = (User)deserialize(response, User.class);
		return responseObject;		
				
	}
	
	
	/**
	 * Fetches WordList objects for the logged-in user.
 
	 * @param authToken  auth_token of logged-in user
 
	 * @param skip  Results to skip
 
	 * @param limit  Maximum number of results to return
 

	 * 
	 * @return List<WordList> {@link WordList}
	 * @throws WordnikAPIException 403 - Not authenticated. 404 - User account not found.  
	 */
	 @MethodArgumentNames(value="authToken, skip, limit") 
	public static List<WordList> getWordListsForCurrentUser(String authToken, String skip, String limit) throws WordnikAPIException {

		if(authToken == null || authToken.length() == 0) {
			throw new WordnikAPIException(WordnikExceptionCodes.AUTH_TOKEN_NOT_VALID);
		}		
		//parse inputs
		String  resourcePath = "/account.{format}/wordLists";
		resourcePath = resourcePath.replace("{format}","json");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		
		if( skip != null) {
		 	queryParams.put("skip", skip);
		}
		if( limit != null) {
		 	queryParams.put("limit", limit);
		}

		
	
		//make the API Call
		String response = invokeAPI(authToken, resourcePath, method, queryParams, null);
		//create output objects if the response has more than one object
        if(response == null || response.length() == 0){
            return null;
        }
		
        TypeReference<ArrayList<WordList>> typeRef = new TypeReference<ArrayList<WordList>>() {
		};
        try {
            List<WordList> responseObject = (List<WordList>) mapper.readValue(response, typeRef);
            return responseObject;
        } catch (IOException ioe) {
        	String[] args = new String[]{response, typeRef.toString()};
            throw new WordnikAPIException(WordnikExceptionCodes.ERROR_CONVERTING_JSON_TO_JAVA, args, "Error in converting response json value to java object : " + ioe.getMessage(), ioe);
        }						
	}
	
	
	
}